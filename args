import argparse
import os
from dotenv import load_dotenv

def get_variable(variable_name, prompt_message, default_value=None):
    """
    Attempts to get a variable in the following order:
    1. Command line argument
    2. Environment variable
    3. .env file
    4. Optional default value
    5. User prompt

    Args:
        variable_name (str): The name of the variable to retrieve (e.g., 'API_KEY').
        prompt_message (str): The message to display if prompting the user.
        default_value (str, optional): A default value to use if the variable is not found
                                       through other means. Defaults to None.

    Returns:
        str: The value of the variable.
    """

    # 1. Check command line arguments
    parser = argparse.ArgumentParser(description=f"Script that uses {variable_name}")
    parser.add_argument(f'--{variable_name.lower()}', type=str, help=f'Specify the {variable_name}')
    args, unknown = parser.parse_known_args()

    if hasattr(args, variable_name.lower()) and getattr(args, variable_name.lower()) is not None:
        print(f"Using {variable_name} from command line argument.")
        return getattr(args, variable_name.lower())

    # 2. Check environment variables
    value = os.getenv(variable_name)
    if value:
        print(f"Using {variable_name} from environment variable.")
        return value

    # 3. Check .env file
    load_dotenv()  # Load environment variables from .env file
    value = os.getenv(variable_name)
    if value:
        print(f"Using {variable_name} from .env file.")
        return value

    # 4. Use optional default value if provided
    if default_value is not None:
        print(f"Using default value for {variable_name}.")
        return default_value

    # 5. Prompt the user
    while True:
        user_input = input(prompt_message).strip()
        if user_input:
            print(f"Using {variable_name} from user input.")
            return user_input
        else:
            print("Input cannot be empty. Please provide a value.")

if __name__ == "__main__":
    print("--- Testing API_KEY ---")
    # Example 1: No default, will prompt if not found
    api_key = get_variable("API_KEY", "Please enter your API Key: ")
    print(f"Your API Key is: {api_key}\n")

    print("--- Testing DATABASE_URL (with default) ---")
    # Example 2: With a default value
    database_url = get_variable("DATABASE_URL",
                                "Please enter your Database URL: ",
                                default_value="sqlite:///my_database.db")
    print(f"Your Database URL is: {database_url}\n")

    print("--- Testing LOG_LEVEL (with default) ---")
    # Example 3: Another variable with a default
    log_level = get_variable("LOG_LEVEL",
                             "Please enter your desired log level (e.g., INFO, DEBUG): ",
                             default_value="INFO")
    print(f"Your Log Level is: {log_level}\n")

    print("\nScript execution continues with the retrieved variables...")
